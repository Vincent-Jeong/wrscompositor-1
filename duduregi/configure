#!/bin/bash

SUPPOTED_TARGETDEVICES=( x11 minnowmax)
SUPPOTED_HMIPROFILES=( classic)

show_help() {
echo "Usage: configure [options]"
echo "Options: [defaults in brackets after descriptions]"
echo
echo "Standard options:"
echo "  --help                 print this message"
echo "  --with-digitalcluster  build with digital cluster feature (on 2nd display)"
echo "  --with-reardisplay     build with rear display feature (on 3rd display)"
echo "  --without-maindisplay  build without main display"
echo "  --without-wlcompositor build without wayland compositor feature (deprecated)"
echo "  --without-webengine    build with WebView (WebKit) instead of WebEngine"
echo "  --target-device=NAME   Set JS configuration for specific target device"
echo "  --hmi-profile=NAME     Set HMI Profile"
echo "  --overwrite            overwrite existing config.js by new target/hmi config"
echo "  --without-qmake        don't execute qmake in configure"
echo ""
echo "Supported target devices:"
for name in "${SUPPOTED_TARGETDEVICES[@]}"
do
	if [ "$name" = "x11" ]; then
		echo "  $name (default for PC dev environment)"
	else
		echo "  $name"
	fi
done
echo ""
echo "Supported HMI profile:"
for name in "${SUPPOTED_HMIPROFILES[@]}"
do
	if [ "$name" = "classic" ]; then
		echo "  $name (default for demo)"
	else
		echo "  $name"
	fi
done
echo
}

if [ "$1" = -h -o "$1" = -help -o "$1" = --help ]
then
    show_help
	exit
fi

SUPPORT_MAINDISPLAY=1
SUPPORT_DCLUSTER=0
SUPPORT_REARDISPLAY=0
SUPPORT_WLCOMPOSITOR=1
SUPPORT_WEBENGINE=1
SUPPORT_DBUS=1
MANUAL_QMAKE=0
TARGET_DEVICE=x11
HMI_PROFILE=classic
OVERWRITE=0
OPTARGS=""

for opt do
    optval="${opt#*=}"
    case "$opt" in
    --without-maindisplay)
		SUPPORT_MAINDISPLAY=0
	;;
    --with-digitalcluster)
		SUPPORT_DCLUSTER=1
	;;
    --with-reardisplay)
		SUPPORT_REARDISPLAY=1
	;;
    --without-wlcompositor)
		SUPPORT_WLCOMPOSITOR=0
	;;
    --without-webengine)
		SUPPORT_WEBENGINE=0
	;;
    --without-qmake)
		MANUAL_QMAKE=1
	;;
    --target-device=*)
		for name in "${SUPPOTED_TARGETDEVICES[@]}"
		do
			if [ $name = $optval ]; then
                TARGET_DEVICE=$optval
				break
			fi
		done
		if [ $optval != $TARGET_DEVICE ]; then
			show_help
			echo
			echo "\"$optval\" is not supported target device"
			exit
		fi
	;;
    --hmi-profile=*)
		for name in "${SUPPOTED_HMIPROFILES[@]}"
		do
			if [ $name = $optval ]; then
                HMI_PROFILE=$optval
				break
			fi
		done
		if [ $optval != $HMI_PROFILE ]; then
			show_help
			echo
			echo "\"$optval\" is not supported HMI Profile"
			exit
		fi
	;;
    --overwrite)
		OVERWRITE=1
	;;
    --help)
	show_help
	exit
	;;
	*)
		OPTARGS="$opt $OPTARGS"
	;;
    esac
done

echo "Build configuration"
echo "  SUPPORT_MAINDISPLAY=$SUPPORT_MAINDISPLAY"
echo "  SUPPORT_DIGITALCLUSTER=$SUPPORT_DCLUSTER"
echo "  SUPPORT_REARDISPLAY=$SUPPORT_REARDISPLAY"
echo "  SUPPORT_WLCOMPOSITOR=$SUPPORT_WLCOMPOSITOR"
echo "  SUPPORT_WEBENGINE=$SUPPORT_WEBENGINE"
echo "  SUPPORT_DBUS=$SUPPORT_DBUS"
echo "  TARGET_DEVICE=$TARGET_DEVICE"
echo "  HMI_PROFILE=$HMI_PROFILE"
echo "  OPTARGS: $OPTARGS"
echo

printf "Generating duduregi.pro ..."
echo "QT += quick qml network" > duduregi.pro

if [ "$SUPPORT_WEBENGINE" = "1" ]; then
echo "QT += webengine" >> duduregi.pro
else
echo "QT += webkitwidgets" >> duduregi.pro
fi

if [ "$SUPPORT_WLCOMPOSITOR" = "1" ]; then
echo "DEFINES += QT_COMPOSITOR_QUICK" >> duduregi.pro
echo "QT += compositor" >> duduregi.pro

echo "QT += compositor-private" >> duduregi.pro
echo "CONFIG +=wayland-scanner" >> duduregi.pro
echo "WAYLANDSERVERSOURCES += protocols/ivi-controller.xml" >> duduregi.pro
echo "CONFIG += link_pkgconfig" >> duduregi.pro
echo "PKGCONFIG += wayland-server" >> duduregi.pro
echo "HEADERS += GeniviWaylandIVIExtension.h" >> duduregi.pro
echo "SOURCES += GeniviWaylandIVIExtension.cpp" >> duduregi.pro

fi

if [ "$SUPPORT_DCLUSTER" = "1" ]; then
echo "HEADERS += digitalcluster.h" >> duduregi.pro
echo "SOURCES += digitalcluster.cpp" >> duduregi.pro
fi

if [ "$SUPPORT_REARDISPLAY" = "1" ]; then
echo "HEADERS += reardisplay.h" >> duduregi.pro
echo "SOURCES += reardisplay.cpp" >> duduregi.pro
echo "OTHER_FILES += rearmain.qml" >> duduregi.pro
fi

if [ "$SUPPORT_DBUS" = "1" ]; then
echo "QT += dbus" >> duduregi.pro
fi
echo "QT += multimedia" >> duduregi.pro

cat duduregi.pro.in >> duduregi.pro

HMI_RC="hmi-$HMI_PROFILE.qrc"
RCPATH="../../$HMI_RC"
cd hmi/$HMI_PROFILE
echo "<RCC>" > $RCPATH
echo "  <qresource prefix=\"/\">" >> $RCPATH
for name in `find . -name '*.qml' -o -name '*.js' -o -name '*.jpg' -o -name '*.png' -o -name '*.svg' | sed -e "s/.\///"`
do
	echo "    <file alias=\"$name\">hmi/$HMI_PROFILE/$name</file>" >> $RCPATH
done
echo "  </qresource>" >> $RCPATH
echo "</RCC>" >> $RCPATH
cd -
echo "RESOURCES += $HMI_RC" >> duduregi.pro


echo $'\r'"Generating duduregi.pro ....................................... Done"


printf "Generating duduregiconfig.h ..."
cat duduregiconfig.h.in | sed \
-e "s/DUDUREGI_MAINDISPLAY 0/DUDUREGI_MAINDISPLAY $SUPPORT_MAINDISPLAY/" \
-e "s/DUDUREGI_DIGITALCLUSTER 0/DUDUREGI_DIGITALCLUSTER $SUPPORT_DCLUSTER/" \
-e "s/DUDUREGI_REARDISPLAY 0/DUDUREGI_REARDISPLAY $SUPPORT_REARDISPLAY/" \
-e "s/DUDUREGI_WAYLAND_COMPOSITOR 0/DUDUREGI_WAYLAND_COMPOSITOR $SUPPORT_WLCOMPOSITOR/" \
-e "s/DUDUREGI_WEBENGINE 0/DUDUREGI_WEBENGINE $SUPPORT_WEBENGINE/" \
-e "s/DUDUREGI_DBUS 0/DUDUREGI_DBUS $SUPPORT_DBUS/" \
-e "s/DEFAULT_TARGET_DEVICE/$TARGET_DEVICE/" \
-e "s/DEFAULT_HMI_PROFILE/$HMI_PROFILE/" \
> duduregiconfig.h
echo $'\r'"Generating duduregiconfig.h ................................... Done"

printf "Generating config.js for hmi profile ..."
TARGETDIR="targets/$TARGET_DEVICE"
CONFIGJS=hmi/$HMI_PROFILE/config.js
if [ -d "$TARGETDIR" ]; then
	OVERWRITTEN=0
	if [ -f $CONFIGJS ]; then
echo $'\r'"Generating config.js for hmi profile ................ Already Exists"
		if [ "$OVERWRITE" = "0" ]; then
			echo "Error, Could not write $CONFIGJS, It's alreay exists"
			echo "Use --overwrite or remove it first before do configure"
			exit 1
		fi
		OVERWRITTEN=1
	fi
	cp -f config-default.js $CONFIGJS
	if [ -f "$TARGETDIR/config-opt.js" ]; then
		cat $TARGETDIR/config-opt.js >> $CONFIGJS
	fi
	if [ "$OVERWRITTEN" = "1" ]; then
echo $'\r'"                                     overwritten at $CONFIGJS"
	else
echo $'\r'"Generating config.js for hmi profile .......................... Done"
	fi
else
echo $'\r'"Generating config.js for hmi profile ....................... Failure"
echo "Error, not supported target device: $TARGET_DEVICE"
exit
fi
echo

if [ "$MANUAL_QMAKE" = "0" ]; then
	if [ -f /opt/windriver/bin/qmake ]; then
		echo "Found Qt Build for Wind River: /opt/windriver"
		echo "/opt/windriver/bin/qmake will be used for build"
		/opt/windriver/bin/qmake $OPTARGS && echo "Makefile generated"
	else
		qmake $OPTARGS && echo "Makefile generated"
	fi
else
	echo "Please execute qmake to create a Makefile"
fi
echo "Configuration Completed"
