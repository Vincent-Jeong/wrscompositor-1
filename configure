#!/bin/bash
#
# Copyright Â© 2016 Wind River Systems, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

SUPPOTED_TARGETDEVICES=( x11 minnowmax mrb)
WRSCOMPOSITOR_PRO=compositor/compositor.pro

show_help() {
    echo "Usage: configure [options]"
    echo "Options: [defaults in brackets after descriptions]"
    echo
    echo "Standard options:"
    echo "  --help                      print this message"
    echo "  --prefix=DIR                prefix dir for installation"
    echo "  --with-digitalcluster       build with digital cluster feature (on 2nd display)"
    echo "  --with-reardisplay          build with rear display feature (on 3rd display)"
    echo "  --without-maindisplay       build without main display"
    echo "  --enable-vthandler          Use VT Handler to switch Virtual Terminal"
    echo "  --target-device=NAME        Set JS configuration for specific target device"
    echo "  --overwrite                 overwrite existing config.js by new target/hmi config"
    echo "  --without-qmake             don't execute qmake in configure"
    echo "  --with-qmake=path           set qmake path (e.g - /usr/bin/qmake)"
    echo ""
    echo "Supported target devices:"
    for name in "${SUPPOTED_TARGETDEVICES[@]}"
    do
        if [ "$name" = "x11" ]; then
            echo "  $name (default for PC dev environment)"
        else
            echo "  $name"
        fi
    done
    echo ""
}

if [ "$1" = -h -o "$1" = -help -o "$1" = --help ]
then
    show_help
    exit
fi

SUPPORT_MAINDISPLAY=1
SUPPORT_DCLUSTER=0
SUPPORT_REARDISPLAY=0
SUPPORT_WLCOMPOSITOR=1
SUPPORT_VTHANDLER=0
SUPPORT_DBUS=1
MANUAL_QMAKE=0
TARGET_DEVICE=x11
OVERWRITE=0
QMAKEPATH=
OPTARGS=""
PREFIX=/usr

for opt do
    optval="${opt#*=}"
    case "$opt" in
        --without-maindisplay)
            SUPPORT_MAINDISPLAY=0
            ;;
        --enable-vthandler)
            SUPPORT_VTHANDLER=1
            ;;
        --with-digitalcluster)
            SUPPORT_DCLUSTER=1
            ;;
        --with-reardisplay)
            SUPPORT_REARDISPLAY=1
            ;;
        --without-qmake)
            MANUAL_QMAKE=1
            ;;
        --with-qmake=*)
            if [ ! -f "$optval" ]; then
                echo "Error, Could not found $optval"
                exit 1
            fi
            QMAKEPATH=$optval
            ;;
        --prefix=*)
            PREFIX=$optval
            ;;
        --target-device=*)
            for name in "${SUPPOTED_TARGETDEVICES[@]}"
            do
                if [ $name = $optval ]; then
                    TARGET_DEVICE=$optval
                    break
                fi
            done
            if [ $optval != $TARGET_DEVICE ]; then
                show_help
                echo
                echo "\"$optval\" is not supported target device"
                exit
            fi
            ;;
        --overwrite)
            OVERWRITE=1
            ;;
        --help)
            show_help
            exit
            ;;
        *)
            OPTARGS="$opt $OPTARGS"
            ;;
    esac
done



if [ "$QMAKEPATH" = "" ]; then
    QMAKEPATH_IN_LINUXDISTROS=( /usr/bin /usr/bin/qt5)
    FOUND=0
    for bindir in "${QMAKEPATH_IN_LINUXDISTROS[@]}"
    do
        if [ -f $bindir/qmake ]; then
            QMAKEPATH=$bindir/qmake
            break
        elif [ -f $bindir/qmake-qt5 ]; then
            QMAKEPATH=$bindir/qmake-qt5
            break
        fi
    done
fi
if [ "$QMAKEPATH" = "" ]; then
    echo "Error, Could not found qmake, please set with --with-qmake"
    exit 1
fi
export PATH=`dirname $QMAKEPATH`:$PATH

echo "Build configuration"
echo "  SUPPORT_MAINDISPLAY=$SUPPORT_MAINDISPLAY"
echo "  SUPPORT_DIGITALCLUSTER=$SUPPORT_DCLUSTER"
echo "  SUPPORT_REARDISPLAY=$SUPPORT_REARDISPLAY"
echo "  SUPPORT_WLCOMPOSITOR=$SUPPORT_WLCOMPOSITOR"
echo "  SUPPORT_VTHANDLER=$SUPPORT_VTHANDLER"
echo "  SUPPORT_DBUS=$SUPPORT_DBUS"
echo "  TARGET_DEVICE=$TARGET_DEVICE"
echo "  OPTARGS: $OPTARGS"
echo "  PREFIX: $PREFIX"
echo
echo "Qt information"
echo "  Qt Version=`$QMAKEPATH -query QT_VERSION`"
echo "  QMake Path=$QMAKEPATH"
echo "  QMake Version=`$QMAKEPATH -query QMAKE_VERSION`"
echo

#printf "Checking pam devel ..."
#if [ ! -f /usr/include/security/pam_appl.h ]; then
#echo $'\r'"Checking pam devel ........................................ Failure"
#echo "Error, Please install wayland development package(s)"
#echo "   ubuntu: libpam0g-dev"
#echo "   fedora: pam-devel"
#exit 1
#else
#echo $'\r'"Checking pam devel ........................................... Done"
#fi

printf "Checking pkg-config wayland-server ..."
if ! pkg-config --exists wayland-server ; then
    echo $'\r'"Checking pkg-config wayland-server ........................ Failure"
    echo "Error, Please install wayland development package(s)"
    echo "   ubuntu: libwayland-dev"
    echo "   fedora: wayland-devel, libwayland-server-devel"
    echo "           libwayland-client-devel, libwayland-cursor-devel"
    exit 1
else
    echo $'\r'"Checking pkg-config wayland-server ........................... Done"
fi

printf "Checking pkg-config gbm ..."
if ! pkg-config --exists gbm ; then
    echo $'\r'"Checking pkg-config gbm ................................... Failure"
    echo "Error, Please install gbm development package(s)"
    echo "   ubuntu: libgbm-dev"
    echo "   fedora: mesa-libgbm-devel"
    exit 1
else
    echo $'\r'"Checking pkg-config gbm ...................................... Done"
fi

#printf "Checking pkg-config libsystemd-login ..."
#if ! pkg-config --exists libsystemd-login ; then
#echo $'\r'"Checking pkg-config libsystemd-login ...................... Failure"
#echo "Error, Please install libsystemd-login-dev package"
#echo "Error, Please install systemd development package(s)"
#echo "   ubuntu: libsystemd-login-dev"
#echo "   fedora: systemd-devel"
#exit 1
#else
#echo $'\r'"Checking pkg-config libsystemd-login ......................... Done"
#fi

printf "Generating compositor.pro ..."
echo "QT += quick qml network gui-private"  > $WRSCOMPOSITOR_PRO

if [ "$SUPPORT_WLCOMPOSITOR" = "1" ]; then
    echo "DEFINES += QT_COMPOSITOR_QUICK" >> $WRSCOMPOSITOR_PRO
    echo "QT += compositor" >> $WRSCOMPOSITOR_PRO

    echo "QT += compositor-private" >> $WRSCOMPOSITOR_PRO
    echo "CONFIG +=wayland-scanner" >> $WRSCOMPOSITOR_PRO
    echo "WAYLANDSERVERSOURCES += protocols/ivi-controller.xml" >> $WRSCOMPOSITOR_PRO
    echo "WAYLANDSERVERSOURCES += protocols/ivi-application.xml" >> $WRSCOMPOSITOR_PRO
    echo "WAYLANDSERVERSOURCES += protocols/ivi-hmi-controller.xml" >> $WRSCOMPOSITOR_PRO
    echo "CONFIG += link_pkgconfig" >> $WRSCOMPOSITOR_PRO
    echo "PKGCONFIG += wayland-server gbm" >> $WRSCOMPOSITOR_PRO
    echo "HEADERS += wrsivimodel.h wrsivisurface.h wrsivicontroller.h wrsiviapplication.h" >> $WRSCOMPOSITOR_PRO
    echo "SOURCES += wrsivimodel.cpp wrsivisurface.cpp wrsivicontroller.cpp wrsiviapplication.cpp" >> $WRSCOMPOSITOR_PRO

fi

if [ "$SUPPORT_DCLUSTER" = "1" ]; then
    echo "HEADERS += digitalcluster.h" >> $WRSCOMPOSITOR_PRO
    echo "SOURCES += digitalcluster.cpp" >> $WRSCOMPOSITOR_PRO
fi

if [ "$SUPPORT_REARDISPLAY" = "1" ]; then
    echo "HEADERS += reardisplay.h" >> $WRSCOMPOSITOR_PRO
    echo "SOURCES += reardisplay.cpp" >> $WRSCOMPOSITOR_PRO
    echo "OTHER_FILES += rearmain.qml" >> $WRSCOMPOSITOR_PRO
fi

if [ "$SUPPORT_DBUS" = "1" ]; then
    echo "QT += dbus" >> $WRSCOMPOSITOR_PRO
fi
echo "QT += multimedia" >> $WRSCOMPOSITOR_PRO

echo "PREFIX=$PREFIX" >> $WRSCOMPOSITOR_PRO


cat $WRSCOMPOSITOR_PRO.in >> $WRSCOMPOSITOR_PRO


echo $'\r'"Generating compositor.pro .................................... Done"

printf "Generating config.h for wrscompositor ..."
cat compositor/config.h.in | sed \
    -e "s/WRSCOMPOSITOR_MAINDISPLAY 0/WRSCOMPOSITOR_MAINDISPLAY $SUPPORT_MAINDISPLAY/" \
    -e "s/WRSCOMPOSITOR_DIGITALCLUSTER 0/WRSCOMPOSITOR_DIGITALCLUSTER $SUPPORT_DCLUSTER/" \
    -e "s/WRSCOMPOSITOR_REARDISPLAY 0/WRSCOMPOSITOR_REARDISPLAY $SUPPORT_REARDISPLAY/" \
    -e "s/WRSCOMPOSITOR_WAYLAND_COMPOSITOR 0/WRSCOMPOSITOR_WAYLAND_COMPOSITOR $SUPPORT_WLCOMPOSITOR/" \
    -e "s/WRSCOMPOSITOR_VTHANDLER 0/WRSCOMPOSITOR_VTHANDLER $SUPPORT_VTHANDLER/" \
    -e "s/WRSCOMPOSITOR_DBUS 0/WRSCOMPOSITOR_DBUS $SUPPORT_DBUS/" \
    -e "s/DEFAULT_TARGET_DEVICE/$TARGET_DEVICE/" \
    > compositor/config.h
echo $'\r'"Generating config.h for wrscompositor .................................. Done"

if [ "$TARGET_DEVICE" = "x11" ]; then
    mkdir -p /usr/share/wrscompositor
    sudo cp clients/mediaplayer/video/*.ogv /usr/share/wrscompositor
    sudo cp compositor/targets/common/etc/dbus-1/system.d/wrscompositor.conf  /etc/dbus-1/system.d/
fi

printf "Generating vt-handler.pro ..."
echo "PREFIX=$PREFIX" > vt-handler/vt-handler.pro
cat vt-handler/vt-handler.pro.in >> vt-handler/vt-handler.pro
echo $'\r'"Generating vt-handler.pro .................................... Done"

printf "Generating mediaplayer.pro ..."
echo "PREFIX=$PREFIX" > clients/mediaplayer/mediaplayer.pro
cat clients/mediaplayer/mediaplayer.pro.in >> clients/mediaplayer/mediaplayer.pro
echo $'\r'"Generating mediaplayer.pro .................................... Done"

printf "Generating skobblernavi.pro ..."
echo "PREFIX=$PREFIX" > clients/skobblernavi/skobblernavi.pro
cat clients/skobblernavi/skobblernavi.pro.in >> clients/skobblernavi/skobblernavi.pro
echo $'\r'"Generating skobblernavi.pro .................................... Done"

printf "Generating phone.pro ..."
echo "PREFIX=$PREFIX" > clients/phone/phone.pro
cat clients/phone/phone.pro.in >> clients/phone/phone.pro
echo $'\r'"Generating phone.pro .................................... Done"

if [ "$MANUAL_QMAKE" = "0" ]; then
    $QMAKEPATH $OPTARGS && echo "Makefile generated"
else
    echo "Please execute qmake to create a Makefile"
fi
echo "Configuration Completed"
echo $0 $@ > config.log
