#!/usr/bin/env python
# -*- coding: utf-8 -*-
from twisted.python import log
from twisted.internet import reactor, protocol
from twisted.internet.task import LoopingCall
from twisted.web import server, resource, static, twcgi
from twisted.web.websockets import WebSocketsResource
from WSProtocols import WSFactory
from WSProtocols import sendSteeringWheelButtonEvent, sendSteeringWheelAxisEvent
#from DrivingWheelHandler import monitor_joystick
from twisted.internet.abstract import FileDescriptor
import os, sys
import time
from subprocess import Popen, PIPE, STDOUT


from txdbus import client, objects
from txdbus.interface import DBusInterface, Method, Signal
class VehicleEventBroker (objects.DBusObject):
    iface = DBusInterface( 'com.windriver.VehicleEventBroker',
                           Signal('vehicleSpeedChanged', 'u')
                         )

    dbusInterfaces = [iface]

    def __init__(self, objectPath):
        objects.DBusObject.__init__(self, objectPath)
        self.speed = 0
        self.direction = 1


    def sendTick(self):
        self.emitSignal('vehicleSpeedChanged', self.speed)
        self.speed += 1 * self.direction
        if self.speed >= 200:
            self.direction = -1
        elif self.speed <= 0:
            self.direction = 1

        reactor.callLater(0.1, self.sendTick)

def onErr(err):
    print 'Failed: ', err.getErrorMessage()
    #reactor.stop()

def onConnected(conn):
    s = VehicleEventBroker('/VehicleEventBroker')

    conn.exportObject( s )

    dn = conn.requestBusName('org.windriver.automotive')

    def onReady(_):
        print 'Emitting periodic "tick" signals. Bus name: org.example, Object Path /Signaller'
        s.sendTick()

    dn.addCallback( onReady )

    return dn




def setCluster():
    p=Popen(['xrandr','-q','-d',':0'], stdout=PIPE, stderr=PIPE)
    p.wait()
    output = p.stdout.read()
    if output.find('HDMI2 connected')>=0:
        os.system('xrandr -d :0 --output HDMI3 --left-of HDMI2')
        os.system('killall cluster')
        time.sleep(1)
        os.system('launch_app com.windriver.cluster')



def main():
    root = static.File(os.path.abspath(os.path.dirname(sys.argv[0])+'/www'))
    root.processors = { '.cgi': twcgi.CGIScript, }
    reactor.listenTCP(7070, server.Site(root))

    resource = WebSocketsResource(WSFactory())
    reactor.listenTCP(9090, server.Site(resource))

    #reactor.callLater(5, setCluster)

    #monitor_joystick(reactor)

    # dbus server for vehicle api
    dconnect = client.connect(reactor)
    dconnect.addCallback(onConnected)
    dconnect.addErrback(onErr)

    reactor.run()

if __name__ == '__main__':
    log.startLogging(sys.stdout)
    main()

# vim: sw=4 ts=8 sts=4 et bs=2 fdm=marker fileencoding=utf8
